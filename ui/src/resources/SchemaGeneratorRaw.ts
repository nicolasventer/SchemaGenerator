export default "/**\r\n * SchemaGenerator for array: [ObjectGenerator, exactNumber | [minNumber, maxNumber] | [0, 10]] \\\r\n * ObjectGenerator: object with a function for each field or a function that returns the object\r\n */\r\nexport type SchemaGenerator<T> = T extends Array<infer U>\r\n\t? [SchemaGenerator<U>, number?] | [SchemaGenerator<U>, [number, number]]\r\n\t: T extends Record<any, any>\r\n\t?\r\n\t\t\t| {\r\n\t\t\t\t\t[K in keyof T]: SchemaGenerator<T[K]> | (() => T[K]);\r\n\t\t\t  }\r\n\t\t\t| (() => T)\r\n\t: () => T;\r\n/**\r\n * create a storage that ensures uniqueness of a field in a array of object, this is reset at exit of the generated array\r\n * @template T type of the field\r\n * @param gen generator for the field\r\n * @returns a generator that ensures uniqueness of the field\r\n */\r\nexport declare const unique_: <T>(gen: () => T) => () => T;\r\n/**\r\n * Generate an object from a generator without limiting the number of elements in the array. \\\r\n * For complex objects, you will need to specify the type of the generator. \\\r\n * If the number of elements to generate for an array is not specified, it will be between 0 (included) and 10 (included). \\\r\n * If the number of elements to generate for an array is specified, it will be between min (included) and max (included). \\\r\n * @template T type of the object\r\n * @param generator generator for the object\r\n * @returns the generated object\r\n */\r\nexport declare const generate: <T>(generator: SchemaGenerator<T>) => T;\r\n/**\r\n * Generate an object from a generator with a limit of 10 elements in the array. \\\r\n * For complex objects, you will need to specify the type of the generator. \\\r\n * If the number of elements to generate for an array is not specified, it will be between 0 (included) and 10 (included). \\\r\n * If the number of elements to generate for an array is specified, it will be between min (included) and max (included). \\\r\n * @template T type of the object\r\n * @param generator generator for the object\r\n * @returns the generated object\r\n */\r\nexport declare const generatePreview: <T>(generator: SchemaGenerator<T>) => T;\r\n/** static class that allows to store and retrieve data with a key (be aware that the generation order is the order of the keys) */\r\nexport declare class Store {\r\n\tprivate constructor();\r\n\tprivate static _data;\r\n\tstatic get: <T>(key: string) => T;\r\n\tstatic set: <T>(key: string, value: T) => T;\r\n}\r\n/**\r\n * create a function that returns an incremental id\r\n * @returns a function that returns a unique id\r\n */\r\nexport declare const getIdFn: () => () => number;\r\n/**\r\n * randomize the order of the elements in an array, the original array is modified\r\n * @template T type of the elements in the array\r\n * @param array array to shuffle\r\n * @returns the shuffled array\r\n */\r\nexport declare const shuffle: <T>(array: T[]) => T[];\r\n/** @returns a random string of 22 characters */\r\nexport declare const randomString: () => string;\r\n/** @returns an integer between 0 and 1_000_000 (excluded) */\r\nexport declare const randomInt: () => number;\r\n/** @returns a float between 0 and 1_000_000 (excluded) */\r\nexport declare const randomFloat: () => number;\r\n/** @returns a boolean */\r\nexport declare const randomBoolean: () => boolean;\r\n/** @returns a random date between today minus 120 days and today plus 120 days */\r\nexport declare const randomDate: () => Date;\r\n/**\r\n * @template T type of the values\r\n * @param values array of values\r\n * @returns a function that returns a random element from the array\r\n */\r\nexport declare const getRandomElementFn: <T>(values: readonly T[]) => () => T;\r\n/**\r\n * @template T type of the values\r\n * @param values array of values\r\n * @returns a function that returns a random unordered subset of the provided array.\r\n */\r\nexport declare const getRandomElementsFn: <T>(values: readonly T[]) => () => T[];\r\n/**\r\n * @param min minimum value (included)\r\n * @param max maximum value (included)\r\n * @returns a function that returns a random number between min and max (included)\r\n */\r\nexport declare const getRandomIntFn: (min: number, max: number) => () => number;\r\n/**\r\n * @param min minimum value (included)\r\n * @param max maximum value (excluded)\r\n * @returns a function that returns a random number between min (included) and max (excluded)\r\n */\r\nexport declare const getRandomFloatFn: (min: number, max: number) => () => number;\r\n/** Object that contains the time units in milliseconds */\r\ndeclare const TimeUnitObj: {\r\n\tmillisecond: number;\r\n\tsecond: number;\r\n\tminute: number;\r\n\thour: number;\r\n\tday: number;\r\n\tweek: number;\r\n\tmonth: number;\r\n\tyear: number;\r\n};\r\n/** Type of the time units, used in {@link addTime} */\r\nexport type TimeUnitT = keyof typeof TimeUnitObj;\r\n/**\r\n * Add time to a date\r\n * @param date date to which the time will be added\r\n * @param amount amount of time to add\r\n * @param unit unit of time\r\n * @returns the new date\r\n */\r\nexport declare const addTime: (date: Date, amount: number, unit: TimeUnitT) => Date;\r\n/**\r\n * @param min minimum value (included)\r\n * @param max maximum value (excluded)\r\n * @returns a function that returns a random date between min (included) and max (excluded)\r\n */\r\nexport declare const getRandomDateFn: (min: Date, max: Date) => () => Date;\r\nexport {};\r\n";