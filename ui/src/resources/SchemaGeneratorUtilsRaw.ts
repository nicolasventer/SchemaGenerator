export default "export { addTime, getIdFn, getRandomDateFn, getRandomElementFn, getRandomElementsFn, getRandomFloatFn, getRandomIntFn, randomBoolean, randomDate, randomFloat, randomInt, randomString, shuffle, Store, unique_, type SchemaGenerator, type TimeUnitT, } from \"schema-generator\";\n/** The result of the generation. */\nexport type Result = {\n    /** The name of the file. */\n    name: string;\n    /** The data generated. */\n    data: unknown[];\n}[];\n/**\n * Generate an object from a generator. It has a limit of 10 elements in the array whether the `--preview` argument is provided. \\\n * For complex objects, you will need to specify the type of the generator. \\\n * If the number of elements to generate for an array is not specified, it will be between 0 (included) and 10 (included). \\\n * If the number of elements to generate for an array is specified, it will be between min (included) and max (included).\n * @template T type of the object\n * @param generator generator for the object\n * @returns the generated object\n */\nexport declare const generate: <T>(generator: import(\"schema-generator\").SchemaGenerator<T>) => T, generatePreview: <T>(generator: import(\"schema-generator\").SchemaGenerator<T>) => T;\n/** Options for writing the result to a file. */\nexport type WriteToFileOptions = {\n    /** The folder where to write the files. */\n    folder?: string;\n    /** Whether to zip the files. */\n    bZip?: boolean;\n    /** Whether to make the json pretty. */\n    bPretty?: boolean;\n};\n/**\n * Write the result to multiple files or a zip file.\n * @param result\n * @param options options\n * @param options.folder the folder where to write the files, can be set with the `--output` flag followed by the folder\n * @param options.bZip whether to zip the files, can be set with the `--zip` flag\n * @param options.bPretty whether to make the json pretty, can be set with the `--pretty` flag\n */\nexport declare const WriteToFile: (result: Result, options?: WriteToFileOptions) => Promise<void>;\n";