export default "declare interface ILocale {\n\tname: string;\n\tweekdays?: string[];\n\tmonths?: string[];\n\tweekStart?: number;\n\tweekdaysShort?: string[];\n\tmonthsShort?: string[];\n\tweekdaysMin?: string[];\n\tordinal?: (n: number) => number | string;\n\tformats: Partial<{\n\t\tLT: string;\n\t\tLTS: string;\n\t\tL: string;\n\t\tLL: string;\n\t\tLLL: string;\n\t\tLLLL: string;\n\t}>;\n\trelativeTime: Partial<{\n\t\tfuture: string;\n\t\tpast: string;\n\t\ts: string;\n\t\tm: string;\n\t\tmm: string;\n\t\th: string;\n\t\thh: string;\n\t\td: string;\n\t\tdd: string;\n\t\tM: string;\n\t\tMM: string;\n\t\ty: string;\n\t\tyy: string;\n\t}>;\n}\n\nexport default dayjs;\n\ndeclare function dayjs(date?: dayjs.ConfigType): dayjs.Dayjs;\n\ndeclare function dayjs(date?: dayjs.ConfigType, format?: dayjs.OptionType, strict?: boolean): dayjs.Dayjs;\n\ndeclare function dayjs(date?: dayjs.ConfigType, format?: dayjs.OptionType, locale?: string, strict?: boolean): dayjs.Dayjs;\n\ndeclare namespace dayjs {\n\tinterface ConfigTypeMap {\n\t\tdefault: string | number | Date | Dayjs | null | undefined;\n\t}\n\n\texport type ConfigType = ConfigTypeMap[keyof ConfigTypeMap];\n\n\texport interface FormatObject {\n\t\tlocale?: string;\n\t\tformat?: string;\n\t\tutc?: boolean;\n\t}\n\n\texport type OptionType = FormatObject | string | string[];\n\n\texport type UnitTypeShort = \"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\";\n\n\texport type UnitTypeLong = \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"date\";\n\n\texport type UnitTypeLongPlural = \"milliseconds\" | \"seconds\" | \"minutes\" | \"hours\" | \"days\" | \"months\" | \"years\" | \"dates\";\n\n\texport type UnitType = UnitTypeLong | UnitTypeLongPlural | UnitTypeShort;\n\n\texport type OpUnitType = UnitType | \"week\" | \"weeks\" | \"w\";\n\texport type QUnitType = UnitType | \"quarter\" | \"quarters\" | \"Q\";\n\texport type ManipulateType = Exclude<OpUnitType, \"date\" | \"dates\">;\n\tclass Dayjs {\n\t\tconstructor(config?: ConfigType);\n\t\t/**\n\t\t * All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n\t\t * ```\n\t\t * dayjs().clone()// => Dayjs\n\t\t * dayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/parse/dayjs-clone\n\t\t */\n\t\tclone(): Dayjs;\n\t\t/**\n\t\t * This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n\t\t * ```\n\t\t * dayjs().isValid()// => boolean\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/parse/is-valid\n\t\t */\n\t\tisValid(): boolean;\n\t\t/**\n\t\t * Get the year.\n\t\t * ```\n\t\t * dayjs().year()// => 2020\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/year\n\t\t */\n\t\tyear(): number;\n\t\t/**\n\t\t * Set the year.\n\t\t * ```\n\t\t * dayjs().year(2000)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/year\n\t\t */\n\t\tyear(value: number): Dayjs;\n\t\t/**\n\t\t * Get the month.\n\t\t *\n\t\t * Months are zero indexed, so January is month 0.\n\t\t * ```\n\t\t * dayjs().month()// => 0-11\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/month\n\t\t */\n\t\tmonth(): number;\n\t\t/**\n\t\t * Set the month.\n\t\t *\n\t\t * Months are zero indexed, so January is month 0.\n\t\t *\n\t\t * Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the next year.\n\t\t * ```\n\t\t * dayjs().month(0)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/month\n\t\t */\n\t\tmonth(value: number): Dayjs;\n\t\t/**\n\t\t * Get the date of the month.\n\t\t * ```\n\t\t * dayjs().date()// => 1-31\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/date\n\t\t */\n\t\tdate(): number;\n\t\t/**\n\t\t * Set the date of the month.\n\t\t *\n\t\t * Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the next months.\n\t\t * ```\n\t\t * dayjs().date(1)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/date\n\t\t */\n\t\tdate(value: number): Dayjs;\n\t\t/**\n\t\t * Get the day of the week.\n\t\t *\n\t\t * Returns numbers from 0 (Sunday) to 6 (Saturday).\n\t\t * ```\n\t\t * dayjs().day()// 0-6\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/day\n\t\t */\n\t\tday(): 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\t\t/**\n\t\t * Set the day of the week.\n\t\t *\n\t\t * Accepts numbers from 0 (Sunday) to 6 (Saturday). If the range is exceeded, it will bubble up to next weeks.\n\t\t * ```\n\t\t * dayjs().day(0)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/day\n\t\t */\n\t\tday(value: number): Dayjs;\n\t\t/**\n\t\t * Get the hour.\n\t\t * ```\n\t\t * dayjs().hour()// => 0-23\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/hour\n\t\t */\n\t\thour(): number;\n\t\t/**\n\t\t * Set the hour.\n\t\t *\n\t\t * Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the next day.\n\t\t * ```\n\t\t * dayjs().hour(12)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/hour\n\t\t */\n\t\thour(value: number): Dayjs;\n\t\t/**\n\t\t * Get the minutes.\n\t\t * ```\n\t\t * dayjs().minute()// => 0-59\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/minute\n\t\t */\n\t\tminute(): number;\n\t\t/**\n\t\t * Set the minutes.\n\t\t *\n\t\t * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next hour.\n\t\t * ```\n\t\t * dayjs().minute(59)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/minute\n\t\t */\n\t\tminute(value: number): Dayjs;\n\t\t/**\n\t\t * Get the seconds.\n\t\t * ```\n\t\t * dayjs().second()// => 0-59\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/second\n\t\t */\n\t\tsecond(): number;\n\t\t/**\n\t\t * Set the seconds.\n\t\t *\n\t\t * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next minutes.\n\t\t * ```\n\t\t * dayjs().second(1)// Dayjs\n\t\t * ```\n\t\t */\n\t\tsecond(value: number): Dayjs;\n\t\t/**\n\t\t * Get the milliseconds.\n\t\t * ```\n\t\t * dayjs().millisecond()// => 0-999\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/millisecond\n\t\t */\n\t\tmillisecond(): number;\n\t\t/**\n\t\t * Set the milliseconds.\n\t\t *\n\t\t * Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the next seconds.\n\t\t * ```\n\t\t * dayjs().millisecond(1)// => Dayjs\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/millisecond\n\t\t */\n\t\tmillisecond(value: number): Dayjs;\n\t\t/**\n\t\t * Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n\t\t *\n\t\t * In general:\n\t\t * ```\n\t\t * dayjs().set(unit, value) === dayjs()[unit](value)\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t * ```\n\t\t * dayjs().set('date', 1)\n\t\t * dayjs().set('month', 3) // April\n\t\t * dayjs().set('second', 30)\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/set\n\t\t */\n\t\tset(unit: UnitType, value: number): Dayjs;\n\t\t/**\n\t\t * String getter, returns the corresponding information getting from Day.js object.\n\t\t *\n\t\t * In general:\n\t\t * ```\n\t\t * dayjs().get(unit) === dayjs()[unit]()\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t * ```\n\t\t * dayjs().get('year')\n\t\t * dayjs().get('month') // start 0\n\t\t * dayjs().get('date')\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/get-set/get\n\t\t */\n\t\tget(unit: UnitType): number;\n\t\t/**\n\t\t * Returns a cloned Day.js object with a specified amount of time added.\n\t\t * ```\n\t\t * dayjs().add(7, 'day')// => Dayjs\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/manipulate/add\n\t\t */\n\t\tadd(value: number, unit?: ManipulateType): Dayjs;\n\t\t/**\n\t\t * Returns a cloned Day.js object with a specified amount of time subtracted.\n\t\t * ```\n\t\t * dayjs().subtract(7, 'year')// => Dayjs\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/manipulate/subtract\n\t\t */\n\t\tsubtract(value: number, unit?: ManipulateType): Dayjs;\n\t\t/**\n\t\t * Returns a cloned Day.js object and set it to the start of a unit of time.\n\t\t * ```\n\t\t * dayjs().startOf('year')// => Dayjs\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/manipulate/start-of\n\t\t */\n\t\tstartOf(unit: OpUnitType): Dayjs;\n\t\t/**\n\t\t * Returns a cloned Day.js object and set it to the end of a unit of time.\n\t\t * ```\n\t\t * dayjs().endOf('month')// => Dayjs\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/manipulate/end-of\n\t\t */\n\t\tendOf(unit: OpUnitType): Dayjs;\n\t\t/**\n\t\t * Get the formatted date according to the string of tokens passed in.\n\t\t *\n\t\t * To escape characters, wrap them in square brackets (e.g. [MM]).\n\t\t * ```\n\t\t * dayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\n\t\t * dayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\n\t\t * dayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/display/format\n\t\t */\n\t\tformat(template?: string): string;\n\t\t/**\n\t\t * This indicates the difference between two date-time in the specified unit.\n\t\t *\n\t\t * To get the difference in milliseconds, use `dayjs#diff`\n\t\t * ```\n\t\t * const date1 = dayjs('2019-01-25')\n\t\t * const date2 = dayjs('2018-06-05')\n\t\t * date1.diff(date2) // 20214000000 default milliseconds\n\t\t * date1.diff() // milliseconds to current time\n\t\t * ```\n\t\t *\n\t\t * To get the difference in another unit of measurement, pass that measurement as the second argument.\n\t\t * ```\n\t\t * const date1 = dayjs('2019-01-25')\n\t\t * date1.diff('2018-06-05', 'month') // 7\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/display/difference\n\t\t */\n\t\tdiff(date?: ConfigType, unit?: QUnitType | OpUnitType, float?: boolean): number;\n\t\t/**\n\t\t * This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\n\t\t * ```\n\t\t * dayjs('2019-01-25').valueOf() // 1548381600000\n\t\t * +dayjs(1548381600000) // 1548381600000\n\t\t * ```\n\t\t * To get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds\n\t\t */\n\t\tvalueOf(): number;\n\t\t/**\n\t\t * This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\n\t\t * ```\n\t\t * dayjs('2019-01-25').unix() // 1548381600\n\t\t * ```\n\t\t * This value is floored to the nearest second, and does not include a milliseconds component.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/display/unix-timestamp\n\t\t */\n\t\tunix(): number;\n\t\t/**\n\t\t * Get the number of days in the current month.\n\t\t * ```\n\t\t * dayjs('2019-01-25').daysInMonth() // 31\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/display/days-in-month\n\t\t */\n\t\tdaysInMonth(): number;\n\t\t/**\n\t\t * To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\n\t\t * ```\n\t\t * dayjs('2019-01-25').toDate()// => Date\n\t\t * ```\n\t\t */\n\t\ttoDate(): Date;\n\t\t/**\n\t\t * To serialize as an ISO 8601 string.\n\t\t * ```\n\t\t * dayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/display/as-json\n\t\t */\n\t\ttoJSON(): string;\n\t\t/**\n\t\t * To format as an ISO 8601 string.\n\t\t * ```\n\t\t * dayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/display/as-iso-string\n\t\t */\n\t\ttoISOString(): string;\n\t\t/**\n\t\t * Returns a string representation of the date.\n\t\t * ```\n\t\t * dayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/display/as-string\n\t\t */\n\t\ttoString(): string;\n\t\t/**\n\t\t * Get the UTC offset in minutes.\n\t\t * ```\n\t\t * dayjs().utcOffset()\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/manipulate/utc-offset\n\t\t */\n\t\tutcOffset(): number;\n\t\t/**\n\t\t * This indicates whether the Day.js object is before the other supplied date-time.\n\t\t * ```\n\t\t * dayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n\t\t * ```\n\t\t * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\t\t * ```\n\t\t * dayjs().isBefore('2011-01-01', 'year')// => boolean\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/query/is-before\n\t\t */\n\t\tisBefore(date?: ConfigType, unit?: OpUnitType): boolean;\n\t\t/**\n\t\t * This indicates whether the Day.js object is the same as the other supplied date-time.\n\t\t * ```\n\t\t * dayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\t\t * ```\n\t\t * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\t\t * ```\n\t\t * dayjs().isSame('2011-01-01', 'year')// => boolean\n\t\t * ```\n\t\t * Docs: https://day.js.org/docs/en/query/is-same\n\t\t */\n\t\tisSame(date?: ConfigType, unit?: OpUnitType): boolean;\n\t\t/**\n\t\t * This indicates whether the Day.js object is after the other supplied date-time.\n\t\t * ```\n\t\t * dayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\t\t * ```\n\t\t * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\t\t * ```\n\t\t * dayjs().isAfter('2011-01-01', 'year')// => boolean\n\t\t * ```\n\t\t * Units are case insensitive, and support plural and short forms.\n\t\t *\n\t\t * Docs: https://day.js.org/docs/en/query/is-after\n\t\t */\n\t\tisAfter(date?: ConfigType, unit?: OpUnitType): boolean;\n\n\t\tlocale(): string;\n\n\t\tlocale(preset: string | ILocale, object?: Partial<ILocale>): Dayjs;\n\t}\n\n\texport type PluginFunc<T = unknown> = (option: T, c: typeof Dayjs, d: typeof dayjs) => void;\n\n\texport function extend<T = unknown>(plugin: PluginFunc<T>, option?: T): Dayjs;\n\n\texport function locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string;\n\n\texport function isDayjs(d: any): d is Dayjs;\n\n\texport function unix(t: number): Dayjs;\n\n\tconst Ls: { [key: string]: ILocale };\n}\n";